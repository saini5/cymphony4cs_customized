"""
Django settings for cymphony4cs project.

Generated by 'django-admin startproject' using Django 3.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
from django.conf import settings
from django.conf.urls import url, include
from django.conf.urls.static import static
from enum import Enum

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'cymphony')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# Should not allow all hosts in production!
ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'controller.apps.ControllerConfig',
    'account.apps.AccountConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_registration'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # TODO: csrf middleware causes
    #  one_step_register to say Forbidden (CSRF cookie not set - most probably because it involves receiving a form from the UI).
    #  work on job to return annotation page even though it is coming back as a json response (which i originally suspected would cause issues with csrf middleware).
    #  process_annotation to say Forbidden (CSRF token missing or incorrect - most probably because it involves receiving a form from UI).
    #  Possible solution:
    #  1. (already known): enable csrf middleware (i did), csrf_token in form template (did and still doing), response needs to be based on RequestContext although there are ways to make it work otherwise (that is why I suspected JsonResponse to fail and thought I would have to do some work around based on something like https://stackoverflow.com/questions/48825067/using-django-csrf-middleware-with-views-returning-jsonresponse)
    #  2. (investigate further for better understanding): https://docs.djangoproject.com/en/3.1/ref/csrf/
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'cymphony4cs.urls'
urlpatterns = [
    # ...
]
if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'cymphony4cs.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('DB_NAME'),
        'USER': os.environ.get('DB_USER'),
        'PASSWORD': os.environ.get('DB_PASSWORD'),
        'HOST': os.environ.get('DB_HOST', '127.0.0.1'),
        'PORT': os.environ.get('DB_PORT', '5432'),
        'ATOMIC_REQUESTS': False,
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static/')

# Account login and signup

LOGIN_REDIRECT_URL = 'account:dashboard'  # manually redirected within user_login since no longer using in-build LoginView

LOGIN_URL = 'account:login'

LOGOUT_URL = 'account:logout'

ACCOUNT_ACTIVATION_DAYS = 365 # One-week activation window

# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

EMAIL_USE_TLS = True

EMAIL_HOST = 'smtp.gmail.com'

EMAIL_PORT = os.environ.get('EMAIL_PORT')

EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')

EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')


# Workflow parsing and execution

BLACKBOX_OPERATORS = ['read_table', '3a_kn', 'write_table', 'sample_random', 'exec_sql', '3a_amt']

WORKFLOW_FILE_ENCODING = 'utf8'

WORKFLOW_STATEMENT_TERMINATOR = ';'

NAMING_CONVENTION_PATTERN = '[a-zA-Z][a-zA-Z0-9_]*'

INPUT_N_MAX_HEADERS = 100

INPUT_N_MAX_RECORDS = 500000

UPLOADED_FILE_TYPES = ['cy', 'input', 'inst', 'layout']

SHORT_INSTRUCTIONS_BEGIN = '<short-instructions>'

SHORT_INSTRUCTIONS_END = '</short-instructions>'

LONG_INSTRUCTIONS_BEGIN = '<long-instructions>'

LONG_INSTRUCTIONS_END = '</long-instructions>'

DESIGN_LAYOUT_BEGIN = '<design-layout>'

DESIGN_LAYOUT_END = '</design-layout>'

DEFAULT_LAYOUT = 'default'

RUN_TYPES = ['simulation', 'human', 'pipelined_simulation']

RUN_STATUS = ['IDLE', 'RUNNING', 'COMPLETED']

OPERATOR_TYPES = ['automatic', 'human']

HUMAN_OPERATORS = ['3a_kn', '3a_amt', '3a_knm']

AUTOMATIC_OPERATORS = ['read_table', 'sample_random', 'exec_sql', 'write_table']

JOB_STATUS = ['IDLE', 'RUNNING', 'COMPLETED', 'ABORTED']

ASSIGNMENT_STATUS = ['PENDING_ANNOTATION', 'COMPLETED', 'ABANDONED']

FREE_TEXT_ANSWER = 'free_text'

DEFAULT_AGGREGATION_LABEL = 'undecided'

DUMP_OPERATOR_OUTPUTS = True


# Simulator
GOLD_LABEL_COLUMN_NAME = 'gold_label'

WORKER_CODES = {
    'ANNOTATE': 1,
    'DELAYED_RETRY': 2,
    'QUIT': 3
}

# Simulated workers should hit this url
TARGET_CYMPHONY_URL = os.environ.get('TARGET_CYMPHONY_URL')

# Below range should be big to avoid username conflicts of synthetic workers hitting a job
MIN_WORKER_NUMBER_FOR_JOB_SIGNUP = 1
MAX_WORKER_NUMBER_FOR_JOB_SIGNUP = 10000

SYNTHETIC_WORKER_PASSWORD = os.environ.get('SYNTHETIC_WORKER_PASSWORD')

# If a synthetic worker is not assigned a task in a running job, he/she should retry working on the job after some time
MIN_WORKER_RETRY_DELAY = 1      # in seconds
MAX_WORKER_RETRY_DELAY = 60     # in seconds

# Request retry parameters for each worker's session (different from worker retrying the job after some time)
RETRIES_TOTAL = 1000
RETRIES_BACKOFF_FACTOR = 1
RETRIES_STATUS_FORCELIST = [500, 502, 503, 504]
RETRIES_METHOD_WHITELIST = False
USER_AGENT = 'python-requests/1.2.0'


# AMT

# Below password is used to derive key.
# the key would be used for encrypting/decrypting iamuser credentials of requester for amt
AMT_PASSWORD = os.environ.get('AMT_PASSWORD')
AMT_PASSWORD_ENCODING = os.environ.get('AMT_PASSWORD_ENCODING')
AMT_SALT_ENCODING = os.environ.get('AMT_SALT_ENCODING')

# Key derivation function
KDF_LENGTH = os.environ.get('KDF_LENGTH')
KDF_ITERATIONS = os.environ.get('KDF_ITERATIONS')

# Properties of AMT credentials supplied by requester
AMT_CREDENTIALS_ENCODING = os.environ.get('AMT_CREDENTIALS_ENCODING')

MTURK_SANDBOX = 'https://mturk-requester-sandbox.us-east-1.amazonaws.com'

# MTURK_PRODUCTION = 'https://mturk-requester-sandbox.us-east-1.amazonaws.com'  # for safety against accidental use, put as sandbox
# uncomment below for deploying to production (and comment above)
MTURK_PRODUCTION = 'https://mturk-requester.us-east-1.amazonaws.com'

MTURK_REGION_NAME = 'us-east-1'

# AMT Qualifications
AMT_QUALIFICATIONS = {
    'workers_are_masters': {
        'sandbox': {
            'QUALIFICATION_TYPE_ID': '2ARFPLSP75KLA8M8DH1HTEQVJT3SY6',
            'COMPARATOR': 'Exists'
        },
        'production': {
            'QUALIFICATION_TYPE_ID': '2F1QJWKUDD8XADTFD2Q0G6UTO95ALH',
            'COMPARATOR': 'Exists'
        }
    },
    'workers_from_location': {
        'QUALIFICATION_TYPE_ID': '00000000000000000071',
        'COMPARATOR': 'In'
    },
    'workers_with_min_hits_approved': {
        'QUALIFICATION_TYPE_ID': '00000000000000000040',
        'COMPARATOR': 'GreaterThanOrEqualTo'
    },
    'workers_with_max_hits_approved': {
        'QUALIFICATION_TYPE_ID': '00000000000000000040',
        'COMPARATOR': 'LessThanOrEqualTo'
    },
    'workers_with_min_approval_rate': {
        'QUALIFICATION_TYPE_ID': '000000000000000000L0',
        'COMPARATOR': 'GreaterThanOrEqualTo'
    },
    'workers_with_max_approval_rate': {
        'QUALIFICATION_TYPE_ID': '000000000000000000L0',
        'COMPARATOR': 'LessThanOrEqualTo'
    }
}

# Default values for 3a_amt optional parameters.
AMT_DEFAULTS = {
    'publish_to_sandbox': True,
    'tasks_per_hit': 1,
    'auto_approve_and_pay_workers_in': 259200   # 3 days
}

AMT_PING_FREQUENCY = 360    # in seconds (360 = 6 minutes)

AMT_ASSIGNMENT_STATUS = ['Submitted', 'Approved', 'Rejected']

AMT_DEFAULT_AGGREGATION_LABEL = 'undecided'

PATH_ANNOTATION_PAGE_AMT = os.path.join(
    BASE_DIR, 'controller', 'templates', 'controller', 'job', 'task_annotation_page_3a_amt.html'
)

# Placeholders in the default annotation page
ANNOTATION_PAGE_AMT_SHORT_INSTRUCTIONS_PLACEHOLDER = 'Insert short instructions here'
ANNOTATION_PAGE_AMT_LONG_INSTRUCTIONS_PLACEHOLDER = 'Insert full instructions here'
ANNOTATION_PAGE_AMT_FORM_DATA_PLACEHOLDER = 'Insert form data here'

# Pipelined cymphony runs
PIPELINED_RUN_PING_FREQUENCY = 20   # in seconds

ASSUMED_SQL = True  # assuming it is a SELECT FROM C_1 WHERE LABEL="+1"

# Logging

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,  # keep the default Django loggers
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'file': {
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'experiments', 'logs', 'django_run.log'),
            'formatter': 'verbose',
        },
    },
    'loggers': {
        '': {  # the root logger
            'handlers': ['console', 'file'],
            'level': 'INFO',
        },
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

